<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Eclipse Announcements: Eclipse Newsletter | Capella: open source MBSE solution</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/75b8o5uDyQc/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/75b8o5uDyQc/</link>
	<description>Learn everything about Capella, an open source workbench based on Eclipse technology that allows engineers to design complex systems.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/75b8o5uDyQc&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 14 Dec 2017 15:10:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Open Source Community Accelerates Big Data Analytics for Geospatial Solutions</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/g_I_oTBERs4/20171214_locationtechopensource.php</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/g_I_oTBERs4/20171214_locationtechopensource.php</link>
	<description>LocationTech announces new project releases that provide core technology for geospatial big data analytic solutions.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/g_I_oTBERs4&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 14 Dec 2017 13:00:00 +0000</pubDate>
</item>
<item>
	<title>Christian Pontesegger: Debugger 11: Watch expressions</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-4955268343761314952</guid>
	<link>http://codeandme.blogspot.com/2017/12/debugger-11-watch-expressions.html</link>
	<description>Now that we have variables working, we might also want to include watch expressions to dynamically inspect code fragments.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Debug Framework Tutorials&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;For a list of all debug related tutorials see &lt;a href=&quot;http://codeandme.blogspot.co.at/p/blog-page.html&quot; target=&quot;_blank&quot;&gt;Debug Framework Tutorials Overview.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/debugger_11_watch_expressions.zip?raw=true&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/debugger_11_watch_expressions.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/debugger/11_watch_expressions&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.&lt;br /&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Step 1: Provide the Watch Expression Delegate&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Watch points are implemented via an extension point. So switch to your &lt;i&gt;plugin.xml&lt;/i&gt; and add a new extension point for &lt;i&gt;org.eclipse.debug.core.watchExpressionDelegates&lt;/i&gt;.&lt;/div&gt;&lt;div&gt;The new delegate simply points to our &lt;i&gt;debugModel&lt;/i&gt; identifier: &lt;i&gt;com.codeandme.debugModelPresentation.textinterpreter&lt;/i&gt; and provides a class implementation:&lt;/div&gt;&lt;pre class=&quot;brush: java&quot;&gt;public class TextWatchExpressionDelegate implements IWatchExpressionDelegate {&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void evaluateExpression(String expression, IDebugElement context, IWatchExpressionListener listener) {&lt;br /&gt;  if (context instanceof TextStackFrame)&lt;br /&gt;   ((TextStackFrame) context).getDebugTarget().fireModelEvent(new EvaluateExpressionRequest(expression, listener));&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;Delegates can decide on which context they may operate. For our interpreter we could evaluate expressions on &lt;i&gt;StackFrames&lt;/i&gt;, &lt;i&gt;Threads&lt;/i&gt; or the &lt;i&gt;Process&lt;/i&gt;, but typically evaluations do take place on a dedicated &lt;i&gt;StackFrame&lt;/i&gt;.&lt;br /&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;b&gt;&lt;u&gt;Step 2: Evaluation&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Now we apply the usual pattern: send an event, let the debugger process it and send some event back to the debug target. Once the evaluation is done we then will inform the provided listener of the outcome of the evaluation.&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;public class TextDebugTarget extends TextDebugElement implements IDebugTarget, IEventProcessor {&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void handleEvent(final IDebugEvent event) {&lt;br /&gt;&lt;br /&gt;   [...]&lt;br /&gt;&lt;br /&gt;   } else if (event instanceof EvaluateExpressionResult) {&lt;br /&gt;    IWatchExpressionListener listener = ((EvaluateExpressionResult) event).getOriginalRequest().getListener();&lt;br /&gt;    TextWatchExpressionResult result = new TextWatchExpressionResult((EvaluateExpressionResult)event, this);&lt;br /&gt;    listener.watchEvaluationFinished(result);    &lt;br /&gt;   }&lt;br /&gt; }&lt;/pre&gt;The &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/debugger/11_watch_expressions/com.codeandme.debugger.textinterpreter.debugger/src/com/codeandme/debugger/textinterpreter/debugger/model/TextWatchExpressionResult.java&quot; target=&quot;_blank&quot;&gt;TextWatchExpressionResult&lt;/a&gt; uses a &lt;i&gt;TextValue&lt;/i&gt; to represent the evaluation result. As before with variables we may support nested child variables within the value. In case the evaluation failed for some reason we may provide error messages which do get displayed in the &lt;i&gt;Expressions&lt;/i&gt; view.</description>
	<pubDate>Thu, 14 Dec 2017 11:03:32 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>Christian Pontesegger: Debugger 10: Editing variables</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-272003061272452073</guid>
	<link>http://codeandme.blogspot.com/2017/12/debugger-10-editing-variables.html</link>
	<description>In the previous tutorial we introduced variables support for our debugger. Now lets see how we can modify variables dynamically during a debug session.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Debug Framework Tutorials&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;For a list of all debug related tutorials see &lt;a href=&quot;http://codeandme.blogspot.co.at/p/blog-page.html&quot; target=&quot;_blank&quot;&gt;Debug Framework Tutorials Overview.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/debugger_10_variable_editing.zip?raw=true&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/debugger_10_variable_editing.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/debugger/10_variable_editing&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.&lt;br /&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Step 1: Allowing for editing and trigger update&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;First variables need to support editing. Then the variables view will automatically provide a text input box on the value field once clicked by the user. This is also a limitation: editing variables requires the framework to interpret an input string and process it accordingly to the target language.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The relevant changes for the &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/debugger/10_variable_editing/com.codeandme.debugger.textinterpreter.debugger/src/com/codeandme/debugger/textinterpreter/debugger/model/TextVariable.java&quot; target=&quot;_blank&quot;&gt;TextVariable&lt;/a&gt; class are shown below:&lt;/div&gt;&lt;pre class=&quot;brush: java&quot;&gt;public class TextVariable extends TextDebugElement implements IVariable {&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void setValue(String expression) {&lt;br /&gt;  getDebugTarget().fireModelEvent(new ChangeVariableRequest(getName(), expression));&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public boolean supportsValueModification() {&lt;br /&gt;  return true;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public boolean verifyValue(String expression) throws DebugException {&lt;br /&gt;  return true;&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;&lt;i&gt;verifyValue(String)&lt;/i&gt; and &lt;i&gt;setValue(String)&lt;/i&gt; are used by the debug framework when a user tries to edit a variable in the UI. We do not need to update the value yet, but simply trigger an event to update the variable in the debugger.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 2: Variable update &amp;amp; refresh&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;As our primitive interpreter accepts any kind of text variables there is nothing which can go wrong here. Instead of sending an update event for the changed variable we simply use the already existing &lt;i&gt;VariablesEvent&lt;/i&gt; to force a refresh of all variables of the current &lt;i&gt;TextStackFrame&lt;/i&gt;:&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;public class TextDebugger implements IDebugger, IEventProcessor {&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void handleEvent(final IDebugEvent event) {&lt;br /&gt;&lt;br /&gt;  [...]&lt;br /&gt;&lt;br /&gt;  } else if (event instanceof ChangeVariableRequest) {&lt;br /&gt;   fInterpreter.getVariables().put(((ChangeVariableRequest) event).getName(), ((ChangeVariableRequest) event).getContent());&lt;br /&gt;   fireEvent(new VariablesEvent(fInterpreter.getVariables()));&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 14 Dec 2017 10:13:07 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>PapyrusUML: Papyrus and the Papyrus IC at Euroforum</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=1062</guid>
	<link>https://papyrusuml.wordpress.com/2017/12/13/papyrus-and-the-papyrus-ic-at-euroforum/</link>
	<description>&lt;p&gt;&lt;a href=&quot;https://twitter.com/MKoegel/status/940669044780355584?t=1&amp;amp;cn=ZmxleGlibGVfcmVjc18y&amp;amp;refsrc=email&amp;amp;iid=10aa808150e048029b010ac46ef98fe6&amp;amp;uid=2707245008&amp;amp;nid=244+293670912&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot; alignright&quot; src=&quot;https://pbs.twimg.com/media/DQ3tfvyW0AA32zn.jpg&quot; style=&quot;width: 25%; height: 25%;&quot; title=&quot;Maximilian and I&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
Yesterday, my minion Maximilian went to the &lt;a href=&quot;http://www.euroforum.de/software-eng/conference-2017/programme-2017/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Automotive Software Development Conference (Euroforum)&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/MKoegel/status/940669044780355584?t=1&amp;amp;cn=ZmxleGlibGVfcmVjc18y&amp;amp;refsrc=email&amp;amp;iid=10aa808150e048029b010ac46ef98fe6&amp;amp;uid=2707245008&amp;amp;nid=244+293670912&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;presented me and my Industry Consortium&lt;/a&gt;!&lt;br /&gt;
I hope I made a good impression (I’m sure Maximilian did a great job)!&lt;/p&gt;
&lt;p&gt;Maybe one day, you will be driving a car with software designed with my help!&lt;/p&gt;
		&lt;div class=&quot;wpcnt&quot;&gt;
			&lt;div class=&quot;wpa wpmrec&quot;&gt;
				&lt;span class=&quot;wpa-about&quot;&gt;Advertisements&lt;/span&gt;
				&lt;div class=&quot;u&quot;&gt;		&lt;div style=&quot;padding-bottom: 15px; width: 300px; height: 250px; float: left; margin-right: 5px; margin-top: 0px;&quot;&gt;
		&lt;div id=&quot;atatags-26942&quot;&gt;
			
		&lt;/div&gt;&lt;/div&gt;		&lt;div style=&quot;padding-bottom: 15px; width: 300px; height: 250px; float: left; margin-top: 0px;&quot;&gt;
		&lt;div id=&quot;atatags-114160&quot;&gt;
			
		&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
						&lt;div id=&quot;crt-1876555177&quot; style=&quot;width: 300px; height: 250px; display: none !important;&quot;&gt;&lt;/div&gt;
		&amp;amp;b		&lt;div id=&quot;crt-923597790&quot; style=&quot;width: 300px; height: 250px; display: none !important;&quot;&gt;&lt;/div&gt;
		&amp;amp;b
			&lt;/div&gt;
		&lt;/div&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;https://papyrusuml.wordpress.com/category/community/&quot;&gt;community&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/conference/&quot;&gt;Conference&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus/&quot;&gt;Papyrus&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus-ic/&quot;&gt;Papyrus IC&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/uncategorized/&quot;&gt;Uncategorized&lt;/a&gt; Tagged: &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/automotive/&quot;&gt;automotive&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/industry/&quot;&gt;industry&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/papyrusuml.wordpress.com/1062/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/papyrusuml.wordpress.com/1062/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/papyrusuml.wordpress.com/1062/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/papyrusuml.wordpress.com/1062/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/papyrusuml.wordpress.com/1062/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/facebook/papyrusuml.wordpress.com/1062/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/papyrusuml.wordpress.com/1062/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/twitter/papyrusuml.wordpress.com/1062/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/papyrusuml.wordpress.com/1062/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/papyrusuml.wordpress.com/1062/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/papyrusuml.wordpress.com/1062/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/papyrusuml.wordpress.com/1062/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/papyrusuml.wordpress.com/1062/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/papyrusuml.wordpress.com/1062/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=papyrusuml.wordpress.com&amp;amp;blog=72365150&amp;amp;post=1062&amp;amp;subd=papyrusuml&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 13 Dec 2017 21:31:20 +0000</pubDate>
</item>
<item>
	<title>Scott Lewis: Remote Services between Python and Java</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-5260961538771372620</guid>
	<link>http://eclipseecf.blogspot.com/2017/12/remote-services-between-python-and-java.html</link>
	<description>ECF's implementation of OSGi Remote Services allows multiple distribution providers, which are responsible for the actual rpc communication required by remote services.   &lt;a href=&quot;https://wiki.eclipse.org/Distribution_Providers&quot; target=&quot;_blank&quot;&gt;Here is a list of ECF distribution providers we've created&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Using &lt;a href=&quot;https://www.py4j.org/&quot; target=&quot;_blank&quot;&gt;Py4j&lt;/a&gt; and &lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot; target=&quot;_blank&quot;&gt;Google Protocol Buffers&lt;/a&gt;, we've recently enhanced an ECF distribution provider that allows the use of remote services (and Remote Service Admin) between OSGi and Python.   Service impls can be in either Java or Python, and consumers can be either Java or Python.     Protocol Buffers can be used to efficiently serialize arguments and return values.&lt;br /&gt;&lt;br /&gt;The only dependencies are on OSGi, Py4j, and Google Protocol buffers, so this distribution provider can be used in Eclipse or other OSGi environments like Karaf.&lt;br /&gt;&lt;br /&gt;Get the most recent release, with examples and source code at &lt;a href=&quot;https://github.com/ECF/Py4j-RemoteServicesProvider&quot; target=&quot;_blank&quot;&gt;this github repository&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
	<pubDate>Wed, 13 Dec 2017 15:23:13 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>
<item>
	<title>Eclipse Announcements: Announcing Open IoT Challenge 4.0 Scholars</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/SPNINveKIds/open-iot-challenge-4-0-scholars-cf750ec3b14b</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/SPNINveKIds/open-iot-challenge-4-0-scholars-cf750ec3b14b</link>
	<description>Congratulations to the Top 12 teams who submitted the best proposals for the fourth Open IoT Challenge!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/SPNINveKIds&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 13 Dec 2017 14:45:00 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools 4.5.2.AM2 for Eclipse Oxygen.2</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.5.2.am2-for-oxygen.2.html</guid>
	<link>https://tools.jboss.org/blog/4.5.2.am2-for-oxygen.2.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.5.2.AM2 (Developer Milestone 2) build for Eclipse Oxygen.2 (built with RC2).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/oxygen/4.5.2.AM2.html&quot;&gt;JBoss Tools 4.5.2 AM2&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.5.2.AM2.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;fuse-tooling&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#fuse-tooling&quot;&gt;&lt;/a&gt;Fuse Tooling&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;fuse-7-karaf-based-runtime-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#fuse-7-karaf-based-runtime-server-adapter&quot;&gt;&lt;/a&gt;Fuse 7 Karaf-based runtime Server adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Fuse 7 is cooking and preliminary versions are already available on &lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/groups/ea/org/jboss/fuse/jboss-fuse-karaf&quot;&gt;early-access repository&lt;/a&gt;. Fuse Tooling is ready to leverage them so that you can try the upcoming major Fuse version.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse 7 Server Adapter&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/Fuse7-ServerAdapter.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Classical functionalities with server adapters are available: automatic redeploy, Java debug, Graphical Camel debug through created JMX connection.
      Please note:
      - you can’t retrieve the Fuse 7 Runtime yet directly from Fuse tooling, it is required to download it on your machine and point to it when creating the Server adapter.
      - the provided templates requires some modifications to have them working with Fuse 7, mainly adapting the bom. Please see work related to it in this &lt;a href=&quot;https://issues.jboss.org/browse/FUSETOOLS-2578&quot;&gt;JIRA task&lt;/a&gt; and its children.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;display-routes-defined-inside-routecontext-in-camel-graphical-editor-design-tab&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#display-routes-defined-inside-routecontext-in-camel-graphical-editor-design-tab&quot;&gt;&lt;/a&gt;Display routes defined inside &quot;routeContext&quot; in Camel Graphical Editor (Design tab)&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&quot;routeContext&quot; tag is a special tag used in Camel to provide the ability to reuse routes and to split them across different files. This is very useful on large projects. See Camel &lt;a href=&quot;http://camel.apache.org/how-do-i-import-routes-from-other-xml-files.html&quot;&gt;documentation&lt;/a&gt; for more information.
      Since this version, the Design of the routes defined in &quot;routeContext&quot; tags are now displayed.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;usability-improvement-progress-bar-when-changing-the-camel-version&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#usability-improvement-progress-bar-when-changing-the-camel-version&quot;&gt;&lt;/a&gt;Usability improvement: Progress bar when &quot;Changing the Camel version&quot;&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Since Fuse Tooling 10.1.0, it is possible to change the Camel version. In case the Camel version was not cached locally yet and for slow internet connections, this operation can take a while. There is now a progress bar to see the progress.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Switch Camel Version with Progress Bar&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/switchCamelVersionWithProgressBar.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 13 Dec 2017 07:40:47 +0000</pubDate>
</item>
<item>
	<title>Nikhil Nanivadekar: November Java User Group Tour 2017</title>
	<guid isPermaLink="false">https://medium.com/p/dbb103b80532</guid>
	<link>https://medium.com/@nikhilnanivadekar/november-java-user-group-tour-2017-dbb103b80532?source=rss-4285d8a2ca86------2</link>
	<description>&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/780/1*tzip632awNaAOq9PZkUBtg.png&quot; /&gt;Cities visited&lt;/figure&gt;&lt;p&gt;This year I had the pleasure to visit multiple Java User Groups in England, Ireland, Northern Ireland and Scotland. I presented about &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;, Java 9 and Robots.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Day 1–25 November 2017: London Java Community (LJC) Unconference:&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*CsAoUjxY_Tj2U2EPraAU-A.jpeg&quot; /&gt;Central London&lt;/figure&gt;&lt;p&gt;I had the opportunity to participate in the &lt;a href=&quot;https://www.meetup.com/Londonjavacommunity&quot;&gt;LJC &lt;/a&gt;Unconference. This year it was disorganized in a &lt;a href=&quot;http://www.jcrete.org/&quot;&gt;JCrete &lt;/a&gt;like format. I did an ignite session on &lt;em&gt;How you can support open source projects?&lt;/em&gt; I mentioned some aspects like starring a project’s repository, using the project, raising issues and bugs, contributing bug fixes/ enhancements and most importantly documentation. In the last session of the day I did an introduction to &lt;a href=&quot;https://github.com/eclipse/eclipse-collections-kata&quot;&gt;Eclipse Collections Kata&lt;/a&gt; a fun way to learn Eclipse Collections framework. Then we all headed to a pub close by and continued discussions over a few beers.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Day 2–26 November 2017: Travel to Dublin:&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*U2P3HlkZ6WN0RPMw2tHPrw.jpeg&quot; /&gt;View from Dublin airport&lt;/figure&gt;&lt;p&gt;The train to Gatwick was canceled but it did not deter my excitement and I (barely) made it to my flight to Dublin from London. This was my first time in Dublin, I walked around the city and went to a few places suggested by friends. I met them for a nice dinner at a Chinese restaurant, roamed around the city, had Guiness and ended the night with some live Irish folk music and Irish Coffee.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Day 2–27 November 2017: Belfast Java User Group:&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*6gXC7cvG0QxrCBeS8tXsIA.jpeg&quot; /&gt;Belfast&lt;/figure&gt;&lt;p&gt;I took a short, comfortable and scenic bus ride to Belfast from Dublin. I did manage to get some sleep and arrived refreshed near Belfast city center. After having a quick lunch, I checked in at my AirBnb and assembled the robots for the presentation in the evening. I roamed around the city, strolled around in the Belfast Christmas market and enjoyed few delicacies. I met one of the organizers before the presentation for a quick pint and he presented the &lt;a href=&quot;https://www.meetup.com/BelfastJUG/&quot;&gt;Belfast JUG&lt;/a&gt; coffee mug to me. I presented &lt;em&gt;Robots for Kid in Us&lt;/em&gt; and &lt;em&gt;API Design of Eclipse Collections&lt;/em&gt;. We had good discussions around how we choose to evolve our API and decisions which we take while adding any new API. The night ended with a Guiness at &lt;a href=&quot;http://visitbelfast.com/things-to-do/member/bittles-bar&quot;&gt;Bittles Bar&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Day 3–28 November 2017: Dublin Java User Group:&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*AQmVFKvMHVw4yQFgnOxTIA.jpeg&quot; /&gt;Dublin&lt;/figure&gt;&lt;p&gt;I took a bus back to Dublin and checked in at my AirBnb close to &lt;a href=&quot;https://en.wikipedia.org/wiki/Temple_Bar,_Dublin&quot;&gt;Temple Bar&lt;/a&gt;. I met the organizer of &lt;a href=&quot;http://www.dubjug.org/&quot;&gt;DubJUG&lt;/a&gt; and enjoyed some much needed and filling lunch. With about 3 hours left to spend, I wandered to the Jameson Distillery, took a tour and headed over for my presentations on &lt;em&gt;Collections.compare&lt;/em&gt; and &lt;em&gt;How to make your project Java 9 compatible&lt;/em&gt;. I ended up presenting for more than 3 hours. One unique thing by audience demand I did was, explained how we code generate all the primitive collections in Eclipse Collections. The night ended with Jameson and some Irish folk music.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Day 4–29 November 2017: Edinburgh Java User Group:&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/960/1*l5bCQaFW7vnv17qYSdQWYQ.jpeg&quot; /&gt;Edinburgh&lt;/figure&gt;&lt;p&gt;I traveled via flight to Edinburgh from Dublin. I had a traditional lunch of Haggis and mash with the only Java Champion in Scotland and walked around Edinburgh. I strolled around Edinburgh, watched a live march, went whiskey/scotch tasting and got ready for the presentation in the evening. The meet up was kicked off by one of the organizers of &lt;a href=&quot;http://www.edjug.org/&quot;&gt;Edinburgh JUG&lt;/a&gt; with a discussion about &lt;em&gt;What’s new with Java&lt;/em&gt;.&lt;em&gt; &lt;/em&gt;I followed with &lt;em&gt;Collections.compare&lt;/em&gt;. We went to a pub right down the street discussed more about Java and a bit about politics. After that I headed to &lt;a href=&quot;http://www.whiskibar.co.uk/&quot;&gt;Whisky bar&lt;/a&gt; for some lively Scottish music and ended the night with Balvenie.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Day 5–30 November 2017: Manchester Java Community (MJC):&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*gzsh7_PYvZvavpwIdzwXgQ.jpeg&quot; /&gt;Manchester&lt;/figure&gt;&lt;p&gt;The day started with a tasty, filling and traditional Scottish breakfast. After a brisk walk to Edinburgh Waverley station I was ready to board the train to Manchester, but, the train was canceled! I was put on a different train with a connection at Preston. I reached Manchester Piccadilly station late afternoon and enjoyed delicious lunch at &lt;a href=&quot;https://www.yelp.com/biz/kabana-manchester&quot;&gt;Kabana&lt;/a&gt;. I met one of the organizers of &lt;a href=&quot;https://www.meetup.com/ManchesterUK-Java-Community&quot;&gt;Manchester Java Community&lt;/a&gt;, we had met at JCrete in 2016 and have since been friends. In autumn, he convinced me to visit and present at MJC and thus the organization of the JUG tour began. I presented &lt;em&gt;Collections.compare&lt;/em&gt; and &lt;em&gt;How to make your project Java 9 compatible&lt;/em&gt;. It was very well received and we continued our discussions at &lt;a href=&quot;http://piccadillytap.com/&quot;&gt;Piccadilly Tap&lt;/a&gt; and ended the night with some local ale.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Day 6–1 December 2017: West Midlands Java User Group (WMJUG):&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/960/1*0tPJ5GBUjJNY3RQU0T7TFA.jpeg&quot; /&gt;Birmingham&lt;/figure&gt;&lt;p&gt;I had lunch at Kabana (again) and headed to Birmingham from Manchester via train. No train delays this time yay! This was the last JUG I was scheduled to present on this trip. I stored my bags at the meet-up location and set out for a walk around Birmingham. I love to walk and explore whenever I am visiting a new place. I stumbled across a Needless Alley 2, I didn’t call it needless, it was named so! Next time I visit Birmingham I do want to search for Needless Alley 1. The walk around Birmingham was relaxing as I reflected about the JUG tour and was happy with the way it turned out. I headed back to meet up location and presented &lt;em&gt;Collections.compare&lt;/em&gt; and &lt;em&gt;Robots for Kid in Us&lt;/em&gt;. After the presentation, I walked over to Birmingham International station for my train to London. As always the bad luck with trains continued and the train was delayed by more than an hour. However, I was happy, excited and content by the success of JUG tour and train delays could not crush my spirit. Finally, the train arrived and I was London bound.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Day 7,8–2,3 December 2017: Hanging out with friends in London:&lt;/strong&gt;&lt;br /&gt;If you go to a different place and don’t meet your friends, I don’t call that visiting. I met my friends from London, watched a Premier League match at a local pub, tasted some fresh brew at a micro-brewery, enjoyed a delicious and filling Sunday Roast and of course had fish and chips.&lt;/p&gt;&lt;p&gt;I headed home after a successful JUG tour and will definitely do it again next year. I would like to thank the organizers of London JC (Twitter: &lt;a href=&quot;https://twitter.com/ljcjug&quot;&gt;ljcjug&lt;/a&gt;), Belfast JUG (Twitter: &lt;a href=&quot;https://twitter.com/BelfastJUG&quot;&gt;BelfastJUG&lt;/a&gt;), Dublin JUG (Twitter: &lt;a href=&quot;https://twitter.com/DubJug&quot;&gt;DubJug&lt;/a&gt;), Edinburgh JUG (Twitter: &lt;a href=&quot;https://twitter.com/edinburghjava&quot;&gt;edinburghjava&lt;/a&gt;), Manchester JC (Twitter: &lt;a href=&quot;https://twitter.com/mcrjava&quot;&gt;mcrjava&lt;/a&gt;), West Midlands JUG (Twitter: &lt;a href=&quot;https://twitter.com/wm_jug&quot;&gt;wm_jug&lt;/a&gt;). I would also like to thank all my friends for their support, timely feedback, encouragement, tweets, emails and chats. I would like to thank everyone who starred the &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/stargazers&quot;&gt;Eclipse Collections Repository&lt;/a&gt; and showed their support. Last but not the least, a very big thank you to everyone who attended and supported me!&lt;/p&gt;&lt;p&gt;In this short travelogue I tried to describe my experience, but honestly I did not come even close to the real awesome experience. In the future I plan to do JUG tours across different countries.&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=dbb103b80532&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 13 Dec 2017 04:39:17 +0000</pubDate>
</item>
<item>
	<title>Mateusz Matela: Eclipse Mars - how to switch back to previous Java formatter?</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-4785738395596161043.post-2422330758851742039</guid>
	<link>http://eclipse-n-mati.blogspot.com/2015/06/eclipse-mars-how-to-switch-back-to.html</link>
	<description>&lt;b&gt;Update: &lt;a href=&quot;https://github.com/alostale/luna-java-formatter&quot;&gt;the Luna formatter plugin now lives on GitHub&lt;/a&gt;, thanks to Asier Lostalé!&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Java code formatter in Eclipse 4.5 has been &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=303519&quot;&gt;completely rewritten&lt;/a&gt;. There's a lot less of bugs, the behavior is more consistent, and line wrapping is a bit smarter. It also opens way to easier implementation of new improvements in the future. &lt;br /&gt;While most users will probably be happy with the new formatter, for some the changes may be unwelcome. Probably the most controversial change is a &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=372801&quot;&gt;more restrictive approach&lt;/a&gt; to the &quot;Never join already wrapped lines&quot; option - a lot of line breaks that used to be tolerated by the old formatter, will be now removed if they don't fit the line wrapping settings. Also, some teams just don't want to force everyone to immediately switch to the newest Eclipse, so during the transition it would be problematic if part of the team used different formatter. &lt;br /&gt;If you also find that problems related to changed formatter behavior outweigh the benefits of bug fixes and improvements, you'll be glad to hear that Eclipse Mars has a new extension point for Java formatter. So it's easy to take the code of the old formatter and wrap it in a plugin. I did just that for your convenience, the plugin can be downloaded &lt;a href=&quot;https://wiki.eclipse.org/images/4/45/OldJavaFormatter.zip&quot;&gt;here&lt;/a&gt;. Although I tested it a bit, the plugin is provided &quot;as is&quot; and I take no responsibility for anything that happens because of it. Just unzip the provided jar into the &quot;plugins&quot; directory of your Eclipse installation, restart, and in the Preferences -&amp;gt; Code Style -&amp;gt; Formatter page select Formatter implementation: Old formatter. Happy formatting!</description>
	<pubDate>Tue, 12 Dec 2017 22:00:59 +0000</pubDate>
	<author>noreply@blogger.com (Mateusz Matela)</author>
</item>
<item>
	<title>Vincent Zurczak: Put OOMPH product versions in separate files</title>
	<guid isPermaLink="false">http://vzurczak.wordpress.com/?p=704</guid>
	<link>https://vzurczak.wordpress.com/2017/12/12/put-oomph-product-versions-in-separate-files/</link>
	<description>&lt;p&gt;Just a quick tip for those who have big setup files for OOMPH products. I recently split up one by putting product versions in other files. Here is how to proceed.&lt;/p&gt;
&lt;p&gt;One big setup file would look like this…&lt;/p&gt;
&lt;pre class=&quot;brush: xml; title: ; notranslate&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;setup:ProductCatalog
    xmi:version=&quot;2.0&quot;
    xmlns:xmi=&quot;http://www.omg.org/XMI&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:setup=&quot;http://www.eclipse.org/oomph/setup/1.0&quot;
    name=&quot;my.product&quot;
    label=&quot;some label&quot;&amp;gt;
    
  &amp;lt;!-- ... --&amp;gt;

  &amp;lt;product name=&quot;myproduct&quot; label=&quot;Custom Eclipse&quot;&amp;gt;
    &amp;lt;annotation
        source=&quot;http://www.eclipse.org/oomph/setup/BrandingInfo&quot;&amp;gt;
      &amp;lt;detail
          key=&quot;folderName&quot;&amp;gt;
        &amp;lt;value&amp;gt;eclipse&amp;lt;/value&amp;gt;
      &amp;lt;/detail&amp;gt;
      &amp;lt;detail
          key=&quot;folderName.macosx&quot;&amp;gt;
        &amp;lt;value&amp;gt;Eclipse&amp;lt;/value&amp;gt;
      &amp;lt;/detail&amp;gt;
    &amp;lt;/annotation&amp;gt;
    
    &amp;lt;version name=&quot;neon&quot;
        label=&quot;Latest Neon&quot;
        requiredJavaVersion=&quot;1.8&quot;&amp;gt;

        &amp;lt;!-- ... --&amp;gt;

    &amp;lt;/version&amp;gt;

    &amp;lt;!-- Maybe with several versions. --&amp;gt;

    &amp;lt;description&amp;gt;...&amp;lt;/description&amp;gt;
  &amp;lt;/product&amp;gt;
&amp;lt;/setup:ProductCatalog&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Now, to split it up, just add a reference to another file.&lt;/p&gt;
&lt;pre class=&quot;brush: xml; title: ; notranslate&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;setup:ProductCatalog
    xmi:version=&quot;2.0&quot;
    xmlns:xmi=&quot;http://www.omg.org/XMI&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:setup=&quot;http://www.eclipse.org/oomph/setup/1.0&quot;
    name=&quot;my.product&quot;
    label=&quot;some label&quot;&amp;gt;
    
  &amp;lt;!-- ... --&amp;gt;

  &amp;lt;product name=&quot;myproduct&quot; label=&quot;Custom Eclipse&quot;&amp;gt;
    &amp;lt;annotation
        source=&quot;http://www.eclipse.org/oomph/setup/BrandingInfo&quot;&amp;gt;
      &amp;lt;detail
          key=&quot;folderName&quot;&amp;gt;
        &amp;lt;value&amp;gt;eclipse&amp;lt;/value&amp;gt;
      &amp;lt;/detail&amp;gt;
      &amp;lt;detail
          key=&quot;folderName.macosx&quot;&amp;gt;
        &amp;lt;value&amp;gt;Eclipse&amp;lt;/value&amp;gt;
      &amp;lt;/detail&amp;gt;
    &amp;lt;/annotation&amp;gt;
    
    &amp;lt;version href=&quot;neon/my.products.neon.setup#/&quot; /&amp;gt;
    &amp;lt;description&amp;gt;...&amp;lt;/description&amp;gt;
  &amp;lt;/product&amp;gt;
&amp;lt;/setup:ProductCatalog&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The important part is the reference to a sub-model file: &lt;strong&gt;version href=”neon/my.products.neon.setup#/”&lt;/strong&gt;. And here is its content.&lt;/p&gt;
&lt;pre class=&quot;brush: xml; title: ; notranslate&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;setup:ProductVersion
    xmi:version=&quot;2.0&quot;
    xmlns:xmi=&quot;http://www.omg.org/XMI&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:setup=&quot;http://www.eclipse.org/oomph/setup/1.0&quot;
    name=&quot;neon&quot;
    label=&quot;Latest Neon&quot;
    requiredJavaVersion=&quot;1.8&quot;&amp;gt;

      &amp;lt;!-- Force the loading of the parent when we open this file directly. --&amp;gt;
      &amp;lt;annotation source=&quot;ProductReference&quot;&amp;gt;
            &amp;lt;reference href=&quot;../my-other-product.setup#/&quot; /&amp;gt;
      &amp;lt;/annotation&amp;gt;

      &amp;lt;!-- ... --&amp;gt;
      
&amp;lt;/setup:ProductVersion&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The essential part here is the &lt;strong&gt;ProductReference&lt;/strong&gt; annotation. It is has no meaning for the EMF model itself, but it forces EMF to load the parent. If you drop this annotation, and that you open this setup file, you will have an error stating that &lt;strong&gt;the required feature ‘product’ of ‘Custom Eclipse’ must be set&lt;/strong&gt;. With it, no matter which setup file you open, everything will be resolved correctly, without an error in the setup editor.&lt;/p&gt;
&lt;p&gt;I made this summary after asking on &lt;a href=&quot;https://www.eclipse.org/forums/index.php/m/1778256/&quot;&gt;Eclipse’s forums&lt;/a&gt;.&lt;br /&gt;
Many thanks to Ed Merks for his help.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/vzurczak.wordpress.com/704/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/vzurczak.wordpress.com/704/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=vzurczak.wordpress.com&amp;amp;blog=10081016&amp;amp;post=704&amp;amp;subd=vzurczak&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 12 Dec 2017 11:57:25 +0000</pubDate>
</item>
<item>
	<title>Niko Stotz: Do we need Eclipse Commons?</title>
	<guid isPermaLink="false">https://www.nikostotz.de/blog/?p=319</guid>
	<link>https://www.nikostotz.de/blog/do-we-need-eclipse-commons/</link>
	<description>&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; Vote at &lt;a href=&quot;https://github.com/enikao/eclipse-commons/issues/1&quot;&gt;https://github.com/enikao/eclipse-commons/issues/1&lt;/a&gt; in favor or against creating an Eclipse Commons (akin to Apache Commons) project.&lt;/p&gt;
&lt;h2&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Have you ever done an Eclipse / EMF project &lt;em&gt;without&lt;/em&gt; implementing this code?&lt;/p&gt;
&lt;div class=&quot;codecolorer-container java default&quot; style=&quot;overflow: auto; white-space: nowrap; width: 435px;&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;div&gt;1&lt;br /&gt;2&lt;br /&gt;3&lt;br /&gt;4&lt;br /&gt;5&lt;br /&gt;6&lt;br /&gt;7&lt;br /&gt;8&lt;br /&gt;&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;div class=&quot;java codecolorer&quot;&gt;&lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;static&lt;/span&gt; IResource toIResource&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;URI uri&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;
    &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;uri.&lt;span style=&quot;color: #006633;&quot;&gt;isPlatformResource&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #009900;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;
        &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;return&lt;/span&gt; ResourcesPlugin.&lt;span style=&quot;color: #006633;&quot;&gt;getWorkspace&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;.&lt;span style=&quot;color: #006633;&quot;&gt;getRoot&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;
            .&lt;span style=&quot;color: #006633;&quot;&gt;findMember&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;uri.&lt;span style=&quot;color: #006633;&quot;&gt;toPlatformString&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #009900;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;
    &lt;span style=&quot;color: #009900;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;
    &lt;br /&gt;
    &lt;span style=&quot;color: #000000; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #000066; font-weight: bold;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #339933;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color: #009900;&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;I haven’t. And I’m tired of writing this code over and over again. Especially as I usually need more than one take to get it right (for example, the version above does not handle URIs pointing to non-existing IResources).&lt;/p&gt;
&lt;p&gt;It &lt;a href=&quot;https://github.com/eclipse/xtext-eclipse/blob/242b5fcc83f4697f6381f9264f710773e8435ce8/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/util/ResourceUtil.java#L121&quot;&gt;already&lt;/a&gt; &lt;a href=&quot;https://github.com/eclipse/emf.compare/blob/a342e717b4fd0a8de948fac21cb047b39f3d806b/plugins/org.eclipse.emf.compare.ide/src/org/eclipse/emf/compare/ide/utils/ResourceUtil.java#L297&quot;&gt;has&lt;/a&gt; &lt;a href=&quot;https://github.com/Gabitchov/org.eclipse.papyrus/blob/32725b840e940c08fb7ff854b7c7b0c75362a5c4/sandbox/PapyrusEMFCompareV1/deprecated/org.eclipse.papyrus.emf.compare.transactional.editor/src/org/eclipse/papyrus/emf/compare/transactional/editor/sphinx/EcorePlatformUtil.java#L495&quot;&gt;been&lt;/a&gt; implemented several times. But I don’t want to introduce complex dependencies for reusing these implementations.&lt;/p&gt;
&lt;p&gt;There are lots of other commonly reused code snippets, like&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;java.net.URI&lt;/tt&gt; ↔ &lt;tt&gt;org.eclipse.emf.common.util.URI&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;In an JUnit test, wait for the workspace to be ready&lt;/li&gt;
&lt;li&gt;Create an IStatus without breaking your fingers&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I therefore propose an &lt;strong&gt;Eclipse Commons project&lt;/strong&gt;. This project would collect small utilities with minimal additional dependencies for common reuse.&lt;/p&gt;
&lt;h2&gt;Counter-Arguments&lt;/h2&gt;
&lt;p&gt;Allow me to anticipate some counter-arguments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This code should be in the &lt;i&gt;original project!&lt;/i&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yes, it should. But it is not. Some reasons might be personal preferences by the maintainers (“This code snippet is too short to be useful”), contextual arguments (“An URI cannot be generically represented as an IResource”), or no actual &lt;i&gt;original project&lt;/i&gt; (where would the JUnit extensions go?).&lt;br /&gt;
(Please note that these are hypothetical reasons, not based on concrete experience.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We don’t want to repeat the &lt;a href=&quot;https://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/&quot;&gt;npm desaster&lt;/a&gt; with tiny snippets!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I envision Eclipse Commons to be hosted by the Eclipse Foundation (obviously). Therefore, no code that has been in there can just disappear.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This seems like an arbitrary collection of code. Who decides what is in, what is out of scope?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I propose a two-step approach. First, there is a “pile” repository (better name highly appreciated) where almost anything can be proposed. For each new proposal, we would have a vote. Every proposal that passes a threshold of votes (details tbd) and meets the required quality is accepted in Eclipse Commons.&lt;br /&gt;
Deployable artifacts are only created from the Eclipse Commons repository.&lt;/p&gt;
&lt;p&gt;We definitely do not want to re-implement functionality that’s available on a similar level, like &lt;a href=&quot;https://commons.apache.org/&quot;&gt;Apache Commons&lt;/a&gt; or &lt;a href=&quot;https://github.com/google/guava&quot;&gt;Google Guava&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That’s chaos! Who creates order?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Besides some sanitation, I would not enforce any “grand scheme of things”. I’d guess Eclipse Commons would contain a quite diverse code base, therefore we don’t need central coordination. Also, there might not be any one party with enough insight into all parts of Eclipse Commons.&lt;/p&gt;
&lt;p&gt;If a sizable chunk of code for a common topic agglomerates, it’s a good sign that the &lt;i&gt;original project&lt;/i&gt; is really missing something and should adopt this chunk of code. This implies there is a party capable of bringing order to that chunk.&lt;/p&gt;
&lt;p&gt;Also, Eclipse Commons should not be misused as a dump for large code base(s) that really should be their own project.&lt;/p&gt;
&lt;h2&gt;Thoughts on Implementation&lt;/h2&gt;
&lt;h3&gt;Dependencies&lt;/h3&gt;
&lt;p&gt;Eclipse Commons should be separated in different plug-ins, guided by having the least possible dependencies. We might have one plug-in &lt;tt&gt;org.eclipse.commons.emf&lt;/tt&gt; only depending on &lt;tt&gt;org.eclipse.core.runtime&lt;/tt&gt;, &lt;tt&gt;org.eclipse.core.resources&lt;/tt&gt;, and &lt;tt&gt;org.eclipse.emf.*&lt;/tt&gt;. Another one might be &lt;tt&gt;org.eclipse.commons.junit&lt;/tt&gt; depending only on core Eclipse and JUnit plug-ins, etc.&lt;/p&gt;
&lt;p&gt;We should have strict separation between UI and non-UI dependent code. Where applicable, we should separate OSGi-dependent code from OSGi-independent implementations (as an example, a class &lt;tt&gt;EcoreUtil2&lt;/tt&gt; might go to the plug-in &lt;tt&gt;org.eclipse.commons.emf.standalone&lt;/tt&gt;, as EMF can be used without OSGi).&lt;/p&gt;
&lt;p&gt;As these plug-ins are meant solely for reuse, they should re-export any dependencies required to use them. We must avoid “class hierarchy incomplete” or “indirectly required” errors for Eclipse Commons users.&lt;/p&gt;
&lt;h3&gt;Versioning and Evolution&lt;/h3&gt;
&lt;p&gt;I propose semantic versioning. Regarding version &lt;i&gt;x.y.z,&lt;/i&gt; we increase &lt;i&gt;y&lt;/i&gt; every time some new proposal is migrated from “pile”. We reset &lt;i&gt;z&lt;/i&gt; for every &lt;i&gt;y&lt;/i&gt; increment to 0, and increase &lt;i&gt;z&lt;/i&gt; for maintenance and bug fixes. &lt;i&gt;x&lt;/i&gt; might be increased when code chunks are moved to an &lt;i&gt;original project&lt;/i&gt; or one of our dependencies changes (see below). Every JavaDoc must contain &lt;tt&gt;@since&lt;/tt&gt; for fine-grained versioning.&lt;/p&gt;
&lt;p&gt;We should be “forever” (i.e. the foreseeable future) backwards-compatible, so we avoid any issues with upgrading. If code chunks are moved to an &lt;i&gt;original project&lt;/i&gt;, this code should still be available within Eclipse Commons, but should be marked as &lt;tt&gt;@deprecated&lt;/tt&gt;. Removing these chunks would require Eclipse Commons users to move to the newest version of the &lt;i&gt;original project&lt;/i&gt;, but they might be not be able to do this. For the same reason, we cannot delegate from the (now deprecated) Eclipse Commons implementation to the &lt;i&gt;original project&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;I’m not sure what to do if a new proposal required a major change in our dependencies. As example, the existing plug-in &lt;tt&gt;org.eclipse.commons.emf&lt;/tt&gt; might depend on &lt;tt&gt;org.eclipse.emf&lt;/tt&gt; in version 2.3, but the new proposal required changes only introduced in EMF v2.6. We might want to go through with such a change, or create a separate plug-in with stricter dependencies.&lt;/p&gt;
&lt;h3&gt;Required Quality&lt;/h3&gt;
&lt;p&gt;I think the bar for entering “pile” should be rather low. This allows voting how useful the addition might be to others, and also allows community effort in reaching the desired quality. As we expect more or less independent utilities, improvements by others than the original authors should be easily possible without much required ramp-up.&lt;/p&gt;
&lt;p&gt;On the other hand, code that enters Eclipse Commons must be pretty good. We want to keep this “forever”, and don’t want to spend the next year cleaning up after a have-backed once-off addition. This includes thorough documentation and tests.&lt;/p&gt;
&lt;p&gt;We should care for naming, especially symmetry in naming. Having two methods &lt;tt&gt;IResource UriUtils.toIResource(URI)&lt;/tt&gt; and &lt;tt&gt;URI IResourceTool.asUri(IResource)&lt;/tt&gt; is highly undesirable.&lt;/p&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;I created a (temporary) repository at &lt;a href=&quot;https://github.com/enikao/eclipse-commons&quot;&gt;https://github.com/enikao/eclipse-commons&lt;/a&gt;, including a (hopefully) thorough implementation of aforementioned utility method.&lt;/p&gt;
&lt;p&gt;What do you think of Eclipse Commons? Would you use it? Contribute? Help in maintaining it? How many votes should be the “pile” → Eclipse Commons threshold? And what would be a better name than “pile”?&lt;br /&gt;
Please leave your &lt;a href=&quot;https://github.com/enikao/eclipse-commons/issues/1&quot;&gt;votes and comments at github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If there was sufficient interest, the next step would be an Eclipse Incubation Project proposal.&lt;/p&gt;</description>
	<pubDate>Sun, 10 Dec 2017 11:12:40 +0000</pubDate>
        <enclosure url="https://nikostotz.de/blog/wp-content/uploads/2012/06/favicon-v2-512x512.png" length="2854" type="image/png"/>
</item>
<item>
	<title>Donald Raab: The Occurrences of Occurrences</title>
	<guid isPermaLink="false">https://medium.com/p/859562d068b0</guid>
	<link>https://medium.com/@donraab/the-occurrences-of-occurrences-859562d068b0?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Keeping counts, and letting you use them for different purposes.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*AfFwZ_4lvzO1qtdyZR3Rew.png&quot; /&gt;Part of my shot glass collection&lt;/figure&gt;&lt;p&gt;I have collected shot glasses for the past three decades. I lost count of the number of shot glasses I have. I think it must be somewhere over 200 by now. I usually buy one when I visit a place for the first time. Friends and family have joined in over the years picking me up shot glasses from cool places they visit. Now if I created a Java class called ShotGlass, I could put all instances of them in a &lt;em&gt;Bag&lt;/em&gt; and then I could answer all kinds of questions about them. I could count them by a lot of different attributes.&lt;/p&gt;&lt;p&gt;A &lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/bag/Bag.html&quot;&gt;&lt;em&gt;Bag&lt;/em&gt;&lt;/a&gt; keeps counts for you. It can tell you the number of occurrences of something it contains. There are several methods available on &lt;em&gt;Bag&lt;/em&gt; that allow you to query or manipulate the number of occurrences of something in a &lt;em&gt;Bag&lt;/em&gt;. Here are all the &lt;em&gt;occurrences&lt;/em&gt; methods that the &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/bag/MutableBag.html&quot;&gt;&lt;em&gt;MutableBag&lt;/em&gt;&lt;/a&gt; class in &lt;a href=&quot;https://projects.eclipse.org/projects/technology.collections/reviews/9.1.0-release-review&quot;&gt;Eclipse Collections 9.1&lt;/a&gt; will have once it is released.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/671/1*Km4B8pJEzMxn7WfsaQ4I9A.png&quot; /&gt;The method collectWithOccurrences is the newest addition in 9.1.&lt;/figure&gt;&lt;p&gt;The following &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; code will programmatically show you the top occurrences of all of the methods that contain “occurrences” in &lt;em&gt;MutableBag&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void topOccurrencesOfOccurrences()&lt;br /&gt;{&lt;br /&gt;    Lists.&lt;strong&gt;&lt;em&gt;fixedSize&lt;/em&gt;&lt;/strong&gt;.with(MutableBag.class.getMethods())&lt;br /&gt;            .asLazy()&lt;br /&gt;            .selectWith(this::methodContains, &lt;strong&gt;&quot;occurrences&quot;&lt;/strong&gt;)&lt;br /&gt;            .countBy(Method::getName)&lt;br /&gt;            .topOccurrences(4)&lt;br /&gt;            .each(System.&lt;strong&gt;&lt;em&gt;out&lt;/em&gt;&lt;/strong&gt;::println);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;private boolean methodContains(Method method, String string)&lt;br /&gt;{&lt;br /&gt;    return method.getName().toLowerCase().contains(string);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;This code outputs:&lt;/p&gt;&lt;pre&gt;selectByOccurrences:4&lt;br /&gt;topOccurrences:2&lt;br /&gt;bottomOccurrences:2&lt;br /&gt;forEachWithOccurrences:1&lt;br /&gt;setOccurrences:1&lt;br /&gt;addOccurrences:1&lt;br /&gt;occurrencesOf:1&lt;br /&gt;collectWithOccurrences:1&lt;br /&gt;removeOccurrences:1&lt;/pre&gt;&lt;p&gt;Here is an example of using the method &lt;em&gt;collectWithOccurrences&lt;/em&gt; with a &lt;em&gt;Bag&lt;/em&gt; of &lt;em&gt;ShotGlass&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void collectWithOccurrences()&lt;br /&gt;{&lt;br /&gt;    Bag&amp;lt;ShotGlass&amp;gt; glasses = Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;br /&gt;            new ShotGlass(Size.&lt;strong&gt;&lt;em&gt;SMALL&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&quot;Orlando&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Florida&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;USA&quot;&lt;/strong&gt;,&lt;br /&gt;                    &lt;strong&gt;&quot;Disney World&quot;&lt;/strong&gt;),&lt;br /&gt;            new ShotGlass(&lt;br /&gt;                    Size.&lt;strong&gt;&lt;em&gt;SMALL&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&quot;Orlando&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Florida&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;USA&quot;&lt;/strong&gt;,&lt;br /&gt;                    &lt;strong&gt;&quot;Sea World&quot;&lt;/strong&gt;),&lt;br /&gt;            new ShotGlass(&lt;br /&gt;                    Size.&lt;strong&gt;&lt;em&gt;SMALL&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&quot;Orlando&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Florida&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;USA&quot;&lt;/strong&gt;,&lt;br /&gt;                    &lt;strong&gt;&quot;Universal Studios&quot;&lt;/strong&gt;),&lt;br /&gt;            new ShotGlass(&lt;br /&gt;                    Size.&lt;strong&gt;&lt;em&gt;MEDIUM&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&quot;Orlando&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Florida&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;USA&quot;&lt;/strong&gt;,&lt;br /&gt;                    &lt;strong&gt;&quot;Hard Rock Cafe&quot;&lt;/strong&gt;)&lt;br /&gt;    );&lt;br /&gt;&lt;br /&gt;    Bag&amp;lt;String&amp;gt; byCity = glasses.countBy(ShotGlass::getCity);&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(&lt;strong&gt;&quot;Orlando&quot;&lt;/strong&gt;, 4)),&lt;br /&gt;            byCity.collectWithOccurrences(&lt;br /&gt;                    PrimitiveTuples::&lt;em&gt;pair&lt;/em&gt;, Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty()));&lt;br /&gt;&lt;br /&gt;    Bag&amp;lt;Size&amp;gt; bySize = glasses.countBy(ShotGlass::getSize);&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(Size.&lt;strong&gt;&lt;em&gt;SMALL&lt;/em&gt;&lt;/strong&gt;, 3),&lt;br /&gt;                    PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(Size.&lt;strong&gt;&lt;em&gt;MEDIUM&lt;/em&gt;&lt;/strong&gt;, 1)),&lt;br /&gt;            bySize.collectWithOccurrences(&lt;br /&gt;                    PrimitiveTuples::&lt;em&gt;pair&lt;/em&gt;, Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty()));&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;The method &lt;em&gt;collectWithOccurrences&lt;/em&gt; is passed each unique value with its count via an &lt;em&gt;ObjectIntToObjectFunction&lt;/em&gt;. It is up to the developer to determine what to return from the &lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/block/function/primitive/ObjectIntToObjectFunction.html&quot;&gt;&lt;em&gt;ObjectIntToObjectFunction&lt;/em&gt;&lt;/a&gt;. In these two cases I opted to simply return an &lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/tuple/primitive/ObjectIntPair.html&quot;&gt;&lt;em&gt;ObjectIntPair&lt;/em&gt;&lt;/a&gt; by using &lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/tuple/primitive/PrimitiveTuples.html&quot;&gt;PrimitiveTuples&lt;/a&gt;::pair.&lt;/p&gt;&lt;p&gt;I have blogged previously about the prepositions &lt;a href=&quot;https://medium.com/@donraab/by-yourself-some-time-e16c0f488847&quot;&gt;By&lt;/a&gt; and &lt;a href=&quot;https://medium.com/@donraab/preposition-preference-1f1c709b098b&quot;&gt;With&lt;/a&gt; and their usefulness in API of &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;. There is the potential for more By and With &lt;em&gt;occurrences&lt;/em&gt; methods to be added to the API of Bag. There is an open issue requesting more occurrences methods on Bag. &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/issues/406&quot;&gt;https://github.com/eclipse/eclipse-collections/issues/406&lt;/a&gt;. I would support adding both &lt;em&gt;By&lt;/em&gt; and &lt;em&gt;With&lt;/em&gt; versions of various methods if there are valid needs.&lt;/p&gt;&lt;p&gt;So it is still unknown how many methods with &lt;em&gt;occurrences&lt;/em&gt; we will wind up adding to our &lt;em&gt;Bag&lt;/em&gt; types. How many occurrences of occurrences methods do you need?&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=859562d068b0&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 10 Dec 2017 02:24:48 +0000</pubDate>
</item>
<item>
	<title>Lorenzo Bettini: Formatting Java method calls in Eclipse</title>
	<guid isPermaLink="false">http://www.lorenzobettini.it/?p=1003</guid>
	<link>http://www.lorenzobettini.it/2017/12/formatting-java-method-calls-in-eclipse/</link>
	<description>&lt;p&gt;Especially with lambdas, you may end up with a chain of method calls that you’d like to have automatically formatted with each invocation on each line (maybe except for the very first invocation).&lt;/p&gt;
&lt;p&gt;You can configure the Eclipse Java formatter with that respect; you just need to reach the right option (the “&lt;strong&gt;Force split&lt;/strong&gt;” is necessary to have each invocation on a separate line):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2017/12/formatting-java-method-calls-in-eclipse/eclipse-formatter1/&quot; rel=&quot;attachment wp-att-1004&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1004&quot; height=&quot;503&quot; src=&quot;https://i2.wp.com/www.lorenzobettini.it/wp-content/uploads/2017/12/eclipse-formatter1.png?resize=625%2C503&quot; width=&quot;625&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and then you can have method calls formatted automatically like that:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2017/12/formatting-java-method-calls-in-eclipse/eclipse-formatter2/&quot; rel=&quot;attachment wp-att-1005&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1005&quot; height=&quot;134&quot; src=&quot;https://i0.wp.com/www.lorenzobettini.it/wp-content/uploads/2017/12/eclipse-formatter2.png?resize=587%2C134&quot; width=&quot;587&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;div class=&quot;sociable&quot;&gt;&lt;div class=&quot;sociable_tagline&quot;&gt;Be Sociable, Share!&lt;/div&gt;&lt;ul class=&quot;clearfix&quot;&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://twitter.com/intent/tweet?text=Formatting%20Java%20method%20calls%20in%20Eclipse%20-%20http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F12%2Fformatting-java-method-calls-in-eclipse%2F%20&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Twitter&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.facebook.com/share.php?u=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F12%2Fformatting-java-method-calls-in-eclipse%2F&amp;amp;t=Formatting%20Java%20method%20calls%20in%20Eclipse&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;https://mail.google.com/mail/?view=cm&amp;amp;fs=1&amp;amp;to&amp;amp;su=Formatting%20Java%20method%20calls%20in%20Eclipse&amp;amp;body=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F12%2Fformatting-java-method-calls-in-eclipse%2F&amp;amp;ui=2&amp;amp;tf=1&amp;amp;shva=1&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;email&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; rel=&quot;nofollow&quot; title=&quot;Add to favorites - doesn't work in Chrome&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.stumbleupon.com/submit?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F12%2Fformatting-java-method-calls-in-eclipse%2F&amp;amp;title=Formatting%20Java%20method%20calls%20in%20Eclipse&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;StumbleUpon&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://delicious.com/post?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F12%2Fformatting-java-method-calls-in-eclipse%2F&amp;amp;title=Formatting%20Java%20method%20calls%20in%20Eclipse&amp;amp;notes=Especially%20with%20lambdas%2C%20you%20may%20end%20up%20with%20a%20chain%20of%20method%20calls%20that%20you%27d%20like%20to%20have%20automatically%20formatted%20with%20each%20invocation%20on%20each%20line%20%28maybe%20except%20for%20the%20very%20first%20invocation%29.%0D%0A%0D%0AYou%20can%20configure%20the%20Eclipse%20Java%20formatter%20with%20&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Delicious&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.google.com/reader/link?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F12%2Fformatting-java-method-calls-in-eclipse%2F&amp;amp;title=Formatting%20Java%20method%20calls%20in%20Eclipse&amp;amp;srcURL=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F12%2Fformatting-java-method-calls-in-eclipse%2F&amp;amp;srcTitle=Lorenzo+Bettini+My+Home+Page&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Google Reader&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.linkedin.com/shareArticle?mini=true&amp;amp;url=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F12%2Fformatting-java-method-calls-in-eclipse%2F&amp;amp;title=Formatting%20Java%20method%20calls%20in%20Eclipse&amp;amp;source=Lorenzo+Bettini+My+Home+Page&amp;amp;summary=Especially%20with%20lambdas%2C%20you%20may%20end%20up%20with%20a%20chain%20of%20method%20calls%20that%20you%27d%20like%20to%20have%20automatically%20formatted%20with%20each%20invocation%20on%20each%20line%20%28maybe%20except%20for%20the%20very%20first%20invocation%29.%0D%0A%0D%0AYou%20can%20configure%20the%20Eclipse%20Java%20formatter%20with%20&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;LinkedIn&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.blinklist.com/index.php?Action=Blink/addblink.php&amp;amp;Url=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F12%2Fformatting-java-method-calls-in-eclipse%2F&amp;amp;Title=Formatting%20Java%20method%20calls%20in%20Eclipse&quot; rel=&quot;nofollow&quot; style=&quot;background-position: 0px 0px;&quot; target=&quot;_blank&quot; title=&quot;BlinkList&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a rel=&quot;nofollow&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;img src=&quot;https://i0.wp.com/www.lorenzobettini.it/wp-content/plugins/sociable/images/more.png?w=625&quot; /&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div id=&quot;sociable-post-1003&quot; style=&quot;display: none;&quot;&gt;   

    &lt;div id=&quot;sociable&quot; style=&quot;display: block;&quot;&gt;



		&lt;div class=&quot;popup&quot;&gt;

			&lt;div class=&quot;content&quot;&gt;

				&lt;ul&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.myspace.com/Modules/PostTo/Pages/?u=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F12%2Fformatting-java-method-calls-in-eclipse%2F&amp;amp;t=Formatting%20Java%20method%20calls%20in%20Eclipse&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Myspace&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://digg.com/submit?phase=2&amp;amp;url=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F12%2Fformatting-java-method-calls-in-eclipse%2F&amp;amp;title=Formatting%20Java%20method%20calls%20in%20Eclipse&amp;amp;bodytext=Especially%20with%20lambdas%2C%20you%20may%20end%20up%20with%20a%20chain%20of%20method%20calls%20that%20you%27d%20like%20to%20have%20automatically%20formatted%20with%20each%20invocation%20on%20each%20line%20%28maybe%20except%20for%20the%20very%20first%20invocation%29.%0D%0A%0D%0AYou%20can%20configure%20the%20Eclipse%20Java%20formatter%20with%20&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Digg&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://reddit.com/submit?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F12%2Fformatting-java-method-calls-in-eclipse%2F&amp;amp;title=Formatting%20Java%20method%20calls%20in%20Eclipse&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Reddit&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.google.com/bookmarks/mark?op=edit&amp;amp;bkmk=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F12%2Fformatting-java-method-calls-in-eclipse%2F&amp;amp;title=Formatting%20Java%20method%20calls%20in%20Eclipse&amp;amp;annotation=Especially%20with%20lambdas%2C%20you%20may%20end%20up%20with%20a%20chain%20of%20method%20calls%20that%20you%27d%20like%20to%20have%20automatically%20formatted%20with%20each%20invocation%20on%20each%20line%20%28maybe%20except%20for%20the%20very%20first%20invocation%29.%0D%0A%0D%0AYou%20can%20configure%20the%20Eclipse%20Java%20formatter%20with%20&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Google Bookmarks&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://news.ycombinator.com/submitlink?u=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F12%2Fformatting-java-method-calls-in-eclipse%2F&amp;amp;t=Formatting%20Java%20method%20calls%20in%20Eclipse&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;HackerNews&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://reporter.es.msn.com/?fn=contribute&amp;amp;Title=Formatting%20Java%20method%20calls%20in%20Eclipse&amp;amp;URL=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F12%2Fformatting-java-method-calls-in-eclipse%2F&amp;amp;cat_id=6&amp;amp;tag_id=31&amp;amp;Remark=Especially%20with%20lambdas%2C%20you%20may%20end%20up%20with%20a%20chain%20of%20method%20calls%20that%20you%27d%20like%20to%20have%20automatically%20formatted%20with%20each%20invocation%20on%20each%20line%20%28maybe%20except%20for%20the%20very%20first%20invocation%29.%0D%0A%0D%0AYou%20can%20configure%20the%20Eclipse%20Java%20formatter%20with%20&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;MSNReporter&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://sphinn.com/index.php?c=post&amp;amp;m=submit&amp;amp;link=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F12%2Fformatting-java-method-calls-in-eclipse%2F&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Sphinn&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://posterous.com/share?linkto=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F12%2Fformatting-java-method-calls-in-eclipse%2F&amp;amp;title=Formatting%20Java%20method%20calls%20in%20Eclipse&amp;amp;selection=Especially%20with%20lambdas%2C%20you%20may%20end%20up%20with%20a%20chain%20of%20method%20calls%20that%20you%27d%20like%20to%20have%20automatically%20formatted%20with%20each%20invocation%20on%20each%20line%20%28maybe%20except%20for%20the%20very%20first%20invocation%29.%0D%0A%0D%0AYou%20can%20configure%20the%20Eclipse%20Java%20formatter%20with%20&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Posterous&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.tumblr.com/share?v=3&amp;amp;u=http%3A%2F%2Fwww.lorenzobettini.it%2F2017%2F12%2Fformatting-java-method-calls-in-eclipse%2F&amp;amp;t=Formatting%20Java%20method%20calls%20in%20Eclipse&amp;amp;s=Especially%20with%20lambdas%2C%20you%20may%20end%20up%20with%20a%20chain%20of%20method%20calls%20that%20you%27d%20like%20to%20have%20automatically%20formatted%20with%20each%20invocation%20on%20each%20line%20%28maybe%20except%20for%20the%20very%20first%20invocation%29.%0D%0A%0D%0AYou%20can%20configure%20the%20Eclipse%20Java%20formatter%20with%20&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Tumblr&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;			

			&lt;/div&gt;        

		  &lt;a class=&quot;close&quot; style=&quot;cursor: pointer;&quot;&gt;

		  &lt;img src=&quot;https://i0.wp.com/www.lorenzobettini.it/wp-content/plugins/sociable/images/closelabel.png?w=625&quot; title=&quot;close&quot; /&gt;

		  &lt;/a&gt;

		&lt;/div&gt;

	&lt;/div&gt; 

  &lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;sociable&quot; style=&quot;float: none;&quot;&gt;&lt;ul class=&quot;clearfix&quot;&gt;&lt;li id=&quot;Twitter_Counter&quot;&gt;&lt;a class=&quot;twitter-share-button&quot; href=&quot;https://twitter.com/share&quot;&gt;Tweet&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;Facebook_Counter&quot;&gt;&lt;/li&gt;&lt;li id=&quot;Google_p&quot;&gt;&lt;/li&gt;&lt;li id=&quot;LinkedIn_Counter&quot;&gt;&lt;/li&gt;&lt;li id=&quot;StumbleUpon_Counter&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
	<pubDate>Sat, 09 Dec 2017 15:38:48 +0000</pubDate>
</item>
<item>
	<title>Vladimir Piskarev: Eclipse Handly 0.8 Released</title>
	<guid isPermaLink="false">http://pisv.wordpress.com/?p=697</guid>
	<link>https://pisv.wordpress.com/2017/12/08/eclipse-handly-0-8-released/</link>
	<description>&lt;p&gt;We are pleased to announce the availability of Eclipse &lt;a href=&quot;http://www.eclipse.org/handly&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Handly&lt;/a&gt; &lt;a href=&quot;https://projects.eclipse.org/projects/technology.handly/releases/0.8&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;0.8&lt;/a&gt; release, which attempts to finalize the key parts of the Core API. To that end, it contains many API enhancements to elements, element deltas, the model, and working copy management. It also introduces new naming convention for model *Impl* interface methods and a separate package for model implementation support. Also, some optimizations have been made in skeletal implementations to allow Handly-based models scale even better than before.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.eclipse.org/Handly/NewIn08&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;New and Noteworthy&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://wiki.eclipse.org/Handly/Migration08&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Migration Guide&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://projects.eclipse.org/projects/technology.handly/downloads&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Downloads&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Despite its incubation status, the project is known to be successfully used by &lt;a href=&quot;https://wiki.eclipse.org/Handly/Adopters&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;early adopters&lt;/a&gt; in their large-scale commercial products. Recently, we created an &lt;a href=&quot;https://github.com/pisv/jdt.core-handly&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;experimental fork of Eclipse Java development tools&lt;/a&gt; (JDT) on GitHub as an experiment in adopting Handly within a non-trivial existing model implementation (the Java model), which can also serve as an exemplary implementation in addition to the exemplary implementations that are shipped as part of the project. All of the nearly 8 000 JUnit tests for the Java model, including performance tests, run successfully in the Handly-based fork, with none of the existing public JDT APIs having been affected in any way. The JDT fork and the other exemplary implementations as well as the project’s &lt;a href=&quot;https://github.com/pisv/gethandly/wiki&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;getting started tutorial&lt;/a&gt; and &lt;a href=&quot;http://www.eclipse.org/downloads/download.php?file=/handly/docs/handly-overview.pdf&amp;amp;r=1&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;architectural overview&lt;/a&gt; have been updated to illustrate enhancements in Handly 0.8.&lt;/p&gt;
&lt;p&gt;Broader community feedback and participation would be most welcome.&lt;/p&gt;
&lt;p&gt;The Handly Team&lt;/p&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=pisv.wordpress.com&amp;amp;blog=63898667&amp;amp;post=697&amp;amp;subd=pisv&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 08 Dec 2017 10:34:49 +0000</pubDate>
</item>
<item>
	<title>Benjamin Cabe: Cloud Native IoT Development in Practice</title>
	<guid isPermaLink="false">https://blog.benjamin-cabe.com/?p=3006</guid>
	<link>http://feedproxy.google.com/~r/benjamin-cabe-planet-eclipse/~3/3r8e3Y0lFaI/cloud-native-iot-development-in-practice</link>
	<description>&lt;p&gt;With &lt;a href=&quot;http://events.linuxfoundation.org/events/kubecon-and-cloudnativecon-north-america&quot; target=&quot;_blankc&quot;&gt;Kubecon&lt;/a&gt; happening this week in Austin,  it is probably a good time to write an article on the role of containers and having a cloud native strategy for IoT, don’t you think?&lt;/p&gt;
&lt;p&gt;Over the past years, &lt;strong&gt;Docker and its ecosystem have been instrumental in modernizing our approach to writing and shipping software&lt;/strong&gt;. Today, more and more applications are becoming &lt;strong&gt;&lt;em&gt;cloud native&lt;/em&gt;&lt;/strong&gt;, meaning that not only core functionalities are being isolated as (micro)services, but also that applications are evolving to be first-class citizens in cloud environments (e.g exposing health metrics, acting as stateless processes, etc.).&lt;/p&gt;
&lt;p&gt;In this blog post, we will be looking at how to approach &lt;strong&gt;cloud native IoT development&lt;/strong&gt;. We will be deploying an &lt;strong&gt;end-to-end IoT solution for power consumption monitoring on OpenShift&lt;/strong&gt;. The deployed services include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IoT connectivity layer&lt;/strong&gt; – getting telemetry data into a backend system is a challenge in itself, and we’ll see how &lt;a href=&quot;https://eclipse.org/hono&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Eclipse Hono&lt;/a&gt; can help with IoT connectivity ;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Device data simulator&lt;/strong&gt; – as a way to illustrate how thinking cloud native for IoT can help make your application scale, we will actually have device simulators running on our cluster ;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monitoring dashboards &lt;/strong&gt;– we’ll see how we can leverage Grafana to visualize the data coming into our cluster, and its overall health ;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;End-user application&lt;/strong&gt; – getting IoT data into our backend is one thing, but we’ll also see how to develop a simple web application to visualize our instant power consumption ;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloud IDE&lt;/strong&gt; – we will be using Eclipse Che to develop the web application mentioned just before.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, let’s break this down!&lt;/p&gt;

&lt;h2&gt;Firing up a single-node OpenShift cluster with Minishift&lt;/h2&gt;
&lt;p&gt;The best way to get an OpenShift cluster setup is to use Minishift, which helps you deploy a single-node cluster on your local machine.&lt;/p&gt;
&lt;p&gt;You can download the latest Minishift releases, and find install instructions on the project’s &lt;a href=&quot;https://github.com/minishift/minishift&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Github repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you have the Minishift command installed, firing up the cluster is actually pretty easy. Here’s the command I use on my quad-core Intel i7 MacBook Pro:&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: false; title: ; notranslate&quot;&gt;minishift start --cpus 4 --memory 12GB --metrics --disk-size 40GB
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/12/openshift-homepage.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;size-medium wp-image-3017 alignright&quot; height=&quot;186&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/12/openshift-homepage-300x186.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;Obviously, your mileage will vary depending on the number of CPUs, memory, or disk space you want to allocate to your cluster, but no matter what your operating system is, soon enough you should be able to log into the OpenShift web console.&lt;/p&gt;
&lt;h2&gt;Scalable IoT Messaging with Eclipse Hono&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/hono/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Eclipse Hono&lt;/a&gt; enables scalable and secure ingestion of large volumes of sensor data into backend systems.&lt;/p&gt;
&lt;figure class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_3022&quot;&gt;&lt;a href=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/12/hono-building-blocks.png&quot;&gt;&lt;img alt=&quot;Eclipse Hono Overview&quot; class=&quot;wp-image-3022 size-large&quot; height=&quot;187&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/12/hono-building-blocks-1024x404.png&quot; width=&quot;474&quot; /&gt;&lt;/a&gt;Eclipse Hono Overview&lt;/figure&gt;
&lt;p&gt;The different building blocks of Hono (protocol adapters, device registry, …) can be deployed as microservices.&lt;/p&gt;
&lt;p&gt;Deploying Hono on OpenShift is really easy: just follow the &lt;a href=&quot;https://www.eclipse.org/hono/deployment/enmasse/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;instructions available in the documentation&lt;/a&gt;! In my setup I’ve deployed a Hono environment where the core messaging functionality is taken care of by &lt;a href=&quot;http://enmasse.io/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;EnMasse&lt;/a&gt;, but you should also be fine with the &lt;a href=&quot;https://www.eclipse.org/hono/deployment/openshift/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;regular, Qpid Dispatch-based, distro&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Feeding data into our system&lt;/h2&gt;
&lt;p&gt;Now that our IoT connectivity layer is deployed, with Hono running within our cluster, we want to &lt;strong&gt;ingest data into our system&lt;/strong&gt;, and consume this data to e.g store it in a database.&lt;/p&gt;
&lt;p&gt;Jens Reimann put together a &lt;a href=&quot;https://github.com/ctron/hono-demo-1&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;nice setup&lt;/a&gt; that uses a public dataset of the energy consumption of a residential house to simulate “real” IoT devices. The application essentially deploys two services on our cluster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;data simulator&lt;/strong&gt; that sends energy consumption information to Hono using &lt;strong&gt;MQTT&lt;/strong&gt;. The producer can be configured to simulate 1, 10… 10,000 of devices. And of course, you can also scale up the number of pods for the simulator to simulate even more devices.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;data consumer&lt;/strong&gt; that taps into Hono’s telemetry API to retrieve data coming from all our virtual houses, and dump it into an &lt;strong&gt;InfluxDB&lt;/strong&gt; time-series database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you follow the install instructions provided in Jens’ repo, you should have your simulator and consumer running in your OpenShift cluster, and data will start showing up in your InfluxDB database.&lt;/p&gt;
&lt;p&gt;Here’s an example of how my Grafana dashboard looks like:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/12/grafana-hono-dashboard.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-large wp-image-3033&quot; height=&quot;285&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/12/grafana-hono-dashboard-1024x616.png&quot; width=&quot;474&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Running Eclipse Che on OpenShift&lt;/h2&gt;
&lt;p&gt;So we now have an IoT messaging infrastructure deployed in our OpenShift cluster, as well as an IoT app effectively pumping business data into our backend. Wouldn’t it be cool if we could also have the developer tools needed to write our user-facing application running in the same cluster?&lt;/p&gt;
&lt;p&gt;Eclipse Che is a developer workspace server and cloud IDE that we will be deploying in our cluster, and using to write some Javascript code right from our browser. Deploying &lt;a href=&quot;https://www.eclipse.org/che&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Eclipse Che&lt;/a&gt; on OpenShift is pretty straightforward and you can refer to the &lt;a href=&quot;https://www.eclipse.org/che/docs/setup/openshift/index.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;instructions on the Eclipse Che website&lt;/a&gt; to deploy it into your OpenShift project.&lt;/p&gt;
&lt;p&gt;In my case, here’s how I would get the nightly build of Che 5.x deployed into my OpenShift project:&lt;/p&gt;
&lt;pre class=&quot;brush: bash; gutter: false; title: ; notranslate&quot;&gt;export CHE_IMAGE_TAG=&quot;nightly-centos&quot;
export CHE_MULTIUSER=&quot;false&quot;
export CHE_OPENSHIFT_PROJECT=&quot;hono&quot;    

DEPLOY_SCRIPT_URL=https://raw.githubusercontent.com/eclipse/che/master/dockerfiles/init/modules/openshift/files/scripts/deploy_che.sh
WAIT_SCRIPT_URL=https://raw.githubusercontent.com/eclipse/che/master/dockerfiles/init/modules/openshift/files/scripts/wait_until_che_is_available.sh
STACKS_SCRIPT_URL=https://raw.githubusercontent.com/eclipse/che/master/dockerfiles/init/modules/openshift/files/scripts/replace_stacks.sh

curl -fsSL ${DEPLOY_SCRIPT_URL} -o ./get-che.sh
curl -fsSL ${WAIT_SCRIPT_URL} -o ./wait-che.sh
curl -fsSL ${STACKS_SCRIPT_URL} -o ./stacks-che.sh

bash ./get-che.sh ; bash ./wait-che.sh ; bash ./stacks-che.sh
&lt;/pre&gt;
&lt;p&gt;And that’s it! Depending on your Internet speed it may take a few minutes for everything to get deployed, but Eclipse Che now just is a click away, accessible through a URL such as http://che-hono.192.168.64.2.nip.io/.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/12/che-on-openshift.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter wp-image-3020 size-large&quot; height=&quot;237&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/12/che-on-openshift-1024x513.png&quot; width=&quot;474&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Writing our user-facing ExpressJS app from Eclipse Che&lt;/h2&gt;
&lt;p&gt;However quick this all was to set up, we’ve essentially worked on the infrastructure of IoT application: messaging, development environment, …&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/12/hono-gauge-e1512679790490.png&quot; rel=&quot;attachment wp-att-3043&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignright wp-image-3043 size-medium&quot; height=&quot;209&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/12/hono-gauge-300x209.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;Arguably, the most interesting part is to actually make use of the data we’ve been collecting! For this, we will be developing a Node.js application that will be getting the overall electricity consumption metrics from  InfluxDB and displaying them on a fancy gauge.&lt;/p&gt;
&lt;p&gt;The final version of the app is available &lt;a href=&quot;https://github.com/kartben/hono-demo-gauge&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; on my Github account. It uses &lt;a href=&quot;http://expressjs.com/fr/&quot;&gt;Express&lt;/a&gt;, the &lt;a href=&quot;https://github.com/node-influx/node-influx&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;InfluxDB client&lt;/a&gt; for Node.js, as well as &lt;a href=&quot;http://bernii.github.io/gauge.js/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;span class=&quot;pl-s&quot;&gt;gaugeJS&lt;/span&gt;&lt;/a&gt; for the gauge widget.&lt;/p&gt;
&lt;p&gt;There are at least two interesting things to note here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thanks to Eclipse Che, we can not only easily set up a stack for Node.js development in no time, but we really have a full-blown IDE that includes &lt;strong&gt;advanced content assist features –&lt;/strong&gt; not something you get that often when developing Javascript code. I can tell you that not being an expert in using the InfluxDB Javascript API, having code completion available in the IDE has been a pretty useful thing &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.3/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/12/che-for-iot-contentassist.gif&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter wp-image-3039 size-full&quot; height=&quot;500&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/12/che-for-iot-contentassist.gif&quot; width=&quot;892&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Since Eclipse Che runs on the very same OpenShift cluster that holds our IoT backend, we can &lt;strong&gt;easily test our code&lt;/strong&gt; against it. From within our Che workspace, all our environment variables are set up, and we can e.g access Hono, InfluxDB, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Closing the loop&lt;/h2&gt;
&lt;p&gt;One last thing… We now have a Node.js application built from Che, that lives in its own Github repo. Wouldn’t it be great to have it run in our cluster, alongside the rest of our microservices?&lt;/p&gt;
&lt;p&gt;From the OpenShift console, you are just a couple clicks away from &lt;strong&gt;deploying the Node.js app into the cluster&lt;/strong&gt;. You can use the template for Node.JS applications to automatically build a Docker image from the Github repository that contains our app. It will automatically detect that the repository contains a Node application, install all its dependencies, build an image, and then deploy it to a pod with a route properly configured to expose our app outside of the cluster.&lt;/p&gt;
&lt;p&gt;You could also set up a hook so that whenever there is a new commit in the upstream repository, the image gets rebuilt and redeployed.&lt;/p&gt;

&lt;a href=&quot;https://blog.benjamin-cabe.com/2017/12/08/cloud-native-iot-development-in-practice/openshift-node-project-1&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;attachment-medium size-medium&quot; height=&quot;200&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/12/openshift-node-project-1-300x200.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://blog.benjamin-cabe.com/2017/12/08/cloud-native-iot-development-in-practice/openshift-node-project-2&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;attachment-medium size-medium&quot; height=&quot;200&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/12/openshift-node-project-2-300x200.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://blog.benjamin-cabe.com/2017/12/08/cloud-native-iot-development-in-practice/openshift-node-project-3&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;attachment-medium size-medium&quot; height=&quot;200&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2017/12/openshift-node-project-3-300x200.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;

&lt;h2&gt;Takeaways&lt;/h2&gt;
&lt;p&gt;Hopefully, this blog post helped you understand the importance of thinking &lt;em&gt;cloud native&lt;/em&gt; when it comes to IoT development.&lt;/p&gt;
&lt;p&gt;If you use Eclipse Hono for your IoT connectivity layer, for example, you automagically get a piece of infrastructure that is already instrumented to autoscale, should the number of devices connected to your backend require it.&lt;/p&gt;
&lt;p&gt;Thanks to Eclipse Che, you can develop your IoT services in a controlled environment, that is already part of the same cluster where the rest of your IoT infrastructure and applications is already running.&lt;/p&gt;
&lt;h2&gt;Final words: don’t push it!&lt;/h2&gt;
&lt;p&gt;Now, I cannot conclude this blog post without a personal observation, and something I hope others have in mind as well.&lt;/p&gt;
&lt;p&gt;Many moons ago, I used to teach people how to develop plugins for the Eclipse RCP platform – a truly great, highly extensible, framework. However, the platform being so modular, soon enough, you could end up turning everything into a plugin, just for the sake of having an “elegant” design. And when you think about it, microservices are very similar to Eclipse plugins…&lt;/p&gt;
&lt;p&gt;Does it really make sense to isolate really tiny microservices in their own containers? For each microservice, what’s the overhead gonna be like to be maintaining its build system, access rights to the corresponding Git repository, configuration files, …?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/kQ3FSVoJrkYWk/giphy.gif&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;You should absolutely have a cloud native strategy when it comes to building your IoT solution, but don’t overthink it!&lt;/strong&gt;&lt;/span&gt; Your microservice architecture will likely emerge over time, and starting with a too small service granularity will just make things unnecessarily complex.&lt;/p&gt;
&lt;p&gt;Please use the comments section below to share your thoughts on cloud native and IoT. I think this will be a hot topic for the near future, and I’m interested in hearing your views!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;Final note:&lt;/em&gt; Shout out to &lt;a href=&quot;https://twitter.com/ctron&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Jens Reimann&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/dejanb&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Dejan Bosanac&lt;/a&gt; from Red Hat who’ve put a lot of work into the Hono part of the demo (running Hono on OpenShift, and putting together the demo app publishing electricity consumption information). Thanks also to Eugene Ivantsov for helping out with getting a proper Eclipse Che stack for JavaScript set up.&lt;/p&gt;
 &lt;p&gt;The post &lt;a href=&quot;https://blog.benjamin-cabe.com/2017/12/08/cloud-native-iot-development-in-practice&quot; rel=&quot;nofollow&quot;&gt;Cloud Native IoT Development in Practice&lt;/a&gt; appeared first on &lt;a href=&quot;https://blog.benjamin-cabe.com&quot; rel=&quot;nofollow&quot;&gt;Benjamin Cabé&lt;/a&gt;.&lt;/p&gt;
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/benjamin-cabe-planet-eclipse/~4/3r8e3Y0lFaI&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 07 Dec 2017 23:01:14 +0000</pubDate>
</item>
<item>
	<title>typefox.io: Theia – VS Code in the Cloud</title>
	<guid isPermaLink="false">http://typefox.io/?p=14487</guid>
	<link>http://typefox.io/theia-vs-code-in-the-cloud</link>
	<description>&lt;div class=&quot;fusion-fullwidth fullwidth-box nonhundred-percent-fullwidth&quot; style=&quot;background-color: rgba(255,255,255,0); background-position: center center; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px;&quot;&gt;&lt;div class=&quot;fusion-builder-row fusion-row &quot;&gt;&lt;div class=&quot;fusion-layout-column fusion_builder_column fusion_builder_column_1_1  fusion-one-full fusion-column-first fusion-column-last 1_1&quot; style=&quot;margin-top: 0px; margin-bottom: 0px;&quot;&gt;
			&lt;div class=&quot;fusion-column-wrapper&quot;&gt;
				&lt;h3&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;… that supports native desktop apps through Electron, too.&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;VS Code is an awesome development tool. It comes with the right balance of simplicity and feature depth. The quality is really high and it performs very well in all situations. Even &lt;/span&gt;&lt;a href=&quot;https://swizec.com/blog/vscode-better-editor-emacs/swizec/7921&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;die-hard Emacs fans&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; are convinced.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As VS Code is mostly implemented in TypeScript you would assume that you can run it in browsers connecting to remote workspaces running in containers. Unfortunately, it wasn’t designed for that. The underlying architecture is really not made for a remote connection between the backend node processes and the frontend (renderer process), as the communication is very chatty and fine-grained. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Providing an awesome IDE for workspaces running in containers is, however, something we needed. And because the available cloud IDEs were disappointing we started &lt;/span&gt;&lt;a href=&quot;https://github.com/theia-ide/theia&quot;&gt;&lt;b&gt;Theia&lt;/b&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-full wp-image-14489&quot; height=&quot;968&quot; src=&quot;http://typefox.io/wp-content/uploads/2017/12/screenshot.jpg&quot; width=&quot;1776&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Besides the support for a browser IDE, we also wanted to allow extension developers to build feature-rich extensions. So unlike VS Code, where only a limited set of functionality is exposed to extension developers, Theia itself is a collection of extensions. In other words, extensions are first-class citizens and they have access to everything the core packages have (as they are extensions, too).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Besides those two design goals, Theia is in many ways similar to VS Code and it is reusing many parts, like the Monaco editor, the language server protocol or the quick open widget (command palette, etc.).&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Theia BETA is out&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Today we have reached an important milestone and published a new version (v0.3.0) to &lt;/span&gt;&lt;a href=&quot;https://www.npmjs.com/search?q=%40theia&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;npmjs.com&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. Theia offers the following features already:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Extension System&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Navigator&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Editor (monaco)&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Terminal (xterm.js)&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Flexible Layout (through phosphor.js)&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Full! Language Server Protocol Support (diagnostics, completion, etc. for 50+ languages) &lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Language Extensions for TypeScript, JavaScript, Java, Python, YANG, DSLs etc.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Outline View&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Problem Marker View&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Git Staging View&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Command Palette&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Command and Keybinding Registries&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Theming&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Layout Restoration&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Find File&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Find Global Symbol&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;many more&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;It is best to try out yourself, which you can easily do if you have Docker on your machine:&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;docker run -it -p 3000:3000 -v &quot;$(pwd):/home/project:cached&quot; theiaide/theia&lt;/pre&gt;&lt;p&gt;
&lt;span style=&quot;font-weight: 400;&quot;&gt;The Docker Hub &lt;/span&gt;&lt;a href=&quot;https://hub.docker.com/u/theiaide/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;organization&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; currently hosts two images, but more configurations will be added over time. And you are invited to &lt;/span&gt;&lt;a href=&quot;https://github.com/theia-ide/theia-apps/blob/master/CONTRIBUTING.md&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;contribute&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; your own, just as IBM did last week with the Java image.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Next Steps&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We are in the process of finalizing our plans for the next months. While Theia is in a good shape to start diving into it, there are some features missing. We will come up with a more concrete plan in the coming days/weeks, but it will include support for debugging, launching tasks and better support for Git among others.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The activity on Theia is very promising, as you can see on &lt;a href=&quot;https://github.com/theia-ide/theia/pulse/monthly&quot;&gt;Github&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-full wp-image-14490&quot; height=&quot;902&quot; src=&quot;http://typefox.io/wp-content/uploads/2017/12/github-activity.png&quot; width=&quot;1522&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Besides Ericsson and TypeFox, who are both more committed than ever, we are having conversations with three other larger corporations who use Theia for building products and who are willing to join and contribute back. In addition, people show up every other day trying Theia or expressing their excitement:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter wp-image-14488&quot; height=&quot;62&quot; src=&quot;http://typefox.io/wp-content/uploads/2017/12/feedback-300x40.png&quot; width=&quot;466&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;And we are excited, too! &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.3/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt; During the next months we will focus on adding missing features, fix bugs, sorting out rough edges and taking care of performance improvements. But we will also be very happy to help you picking up and getting into Theia. It’s ready for that!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Get in touch on &lt;/span&gt;&lt;a href=&quot;https://github.com/theia-ide/theia&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Github&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; or &lt;/span&gt;&lt;a href=&quot;https://gitter.im/theia-ide/theia&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Gitter&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; (or simply leave a comment below).&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;fusion-clearfix&quot;&gt;&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 06 Dec 2017 17:32:18 +0000</pubDate>
</item>
<item>
	<title>Roxanne Joncas: Open IoT Challenge 4.0 Scholars</title>
	<guid isPermaLink="false">https://medium.com/p/cf750ec3b14b</guid>
	<link>https://medium.com/@roxanne.iot/open-iot-challenge-4-0-scholars-cf750ec3b14b?source=rss-82f8afd3e513------2</link>
	<description>&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*UFhSzsN3Zl5775uaN6EQsg.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;The fourth edition of the &lt;a href=&quot;https://iot.eclipse.org/open-iot-challenge/&quot;&gt;Open IoT Challenge&lt;/a&gt; was launched in September and as of November 20, the race to build the best open IoT solution has officially begun!&lt;/p&gt;&lt;p&gt;Over 70 teams have submitted their ideas and are now in the running to win the Open IoT Challenge 4.0.&lt;/p&gt;&lt;p&gt;The participants have four months to make their idea a reality and show everyone how an innovative IoT solution can be built with open source and standards. The deadline to submit their final solution report is March 15. After that deadline, it’s in the jury’s hands. They will review each solution and pick the 3 winning teams.&lt;/p&gt;&lt;h3&gt;The Jury&lt;/h3&gt;&lt;p&gt;The jury has already deliberated to select the best proposals, which is the first Challenge milestone. They reviewed each proposal and chose the Top 12! You heard that right, 12 lucky teams were selected, not just 10 as originally announced.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/749/1*RTEH5x4w5GWbUqyCffuljw.png&quot; /&gt;Open IoT Challenge 4.0 — Jury&lt;/figure&gt;&lt;h3&gt;Top 12 Proposals&lt;/h3&gt;&lt;p&gt;Congratulations to the Top 12 teams who have been awarded a “starter kit” to the most promising solutions! The kit includes a $150 gift card to buy IoT hardware and a mangOH® Red offered by Sierra Wireless for those who wish to use it to build their solution.&lt;/p&gt;&lt;p&gt;The top teams and the name of the submitters are (in alphabetical order):&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://youtu.be/w4vCGbUDfnA&quot;&gt;&lt;strong&gt;ActivIoTy&lt;/strong&gt;&lt;/a&gt; (Martin Alvarez-Espinar)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Alya&lt;/strong&gt; (Bilal Al-Saeedi)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Autonomy of Things&lt;/strong&gt; (Cay-Eric Schimanski)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://dronov.net/2017/11/17/we-make-an-open-source-cloud-oscilloscope.html&quot;&gt;&lt;strong&gt;Cloud Oscilloscope&lt;/strong&gt;&lt;/a&gt; (Mikhail Dronov)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://air.imag.fr/index.php/ASAC/AP&quot;&gt;&lt;strong&gt;GreenHouse : Aquaponics&lt;/strong&gt;&lt;/a&gt; (Dorian Reboullet)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://trusted827.wordpress.com/&quot;&gt;&lt;strong&gt;Trusted Indoor Positioning System for Nursing Homes&lt;/strong&gt;&lt;/a&gt; (Francisco J. Quesada Real)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://spark.adobe.com/page/TE7tWhUApZeNz/&quot;&gt;&lt;strong&gt;Obee&lt;/strong&gt;&lt;/a&gt; (Attila Turgut Özyazgan)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://youtu.be/GY56vJcFDCw&quot;&gt;&lt;strong&gt;Poulpy&lt;/strong&gt;&lt;/a&gt; (Léa De Mira Godinho)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://brus-dev.blogspot.it/2017/11/smart-solar-water-heating-solution-to.html&quot;&gt;&lt;strong&gt;Smart solar water heating&lt;/strong&gt;&lt;/a&gt; (Domenico Francesco Bruscino)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://youtu.be/vvq8dD1cCkg&quot;&gt;&lt;strong&gt;SkyRocket Group&lt;/strong&gt;&lt;/a&gt; (Oluwatobi Oyinlola)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/@IoTagger/a-smart-city-solution-time-meter-c24285c4ef71&quot;&gt;&lt;strong&gt;Time-Meter&lt;/strong&gt;&lt;/a&gt; (Tamara Gagliardi)&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Trync&lt;/strong&gt; (Chanaka Madushan Jayalath)&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;strong&gt;To all submitters&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;You submitted a solution idea for the Challenge, but your name does not appear in this list? That doesn’t mean that you can’t win the Challenge! You’re still in the running for the final prizes, so don’t give up.&lt;/p&gt;&lt;p&gt;We could only select so many teams to be in the top proposals and we actually chose 12 teams instead of 10. Keep working on your solution and show the world how it is done!&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Stay tuned&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;The teams will be sharing their build journey in blog or vlog form, so keep checking the &lt;a href=&quot;http://iot.eclipse.org/open-iot-challenge/&quot;&gt;Challenge website&lt;/a&gt; to follow their story or follow &lt;a href=&quot;https://twitter.com/eclipseiot&quot;&gt;@EclipseIoT&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/search?f=tweets&amp;amp;vertical=default&amp;amp;q=%23openiotchallenge&amp;amp;src=typd&quot;&gt;#OpenIoTChallenge&lt;/a&gt; on Twitter to receive updates in your feed.&lt;/p&gt;&lt;p&gt;Thank you to our &lt;a href=&quot;https://iot.eclipse.org/open-iot-challenge/sponsors#sponsors&quot;&gt;sponsors&lt;/a&gt; for making this the Open IoT Challenge 4.0 possible.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/833/1*jOwXeJeWS_s1EedTsy9StQ.png&quot; /&gt;Open IoT Challenge 4.0 Sponsor&lt;/figure&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=cf750ec3b14b&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 06 Dec 2017 13:45:24 +0000</pubDate>
</item>
<item>
	<title>Scott Lewis: ECF 3.13.8 and etcd discovery for remote services</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-38983714788083022</guid>
	<link>http://eclipseecf.blogspot.com/2017/12/ecf-3138-and-etcd-discovery-for-remote.html</link>
	<description>&lt;br /&gt;ECF &lt;a href=&quot;http://www.eclipse.org/ecf/downloads.php&quot; target=&quot;_blank&quot;&gt;3.13.8&lt;/a&gt; has been available since September, but there are some new things available:&lt;br /&gt;&lt;br /&gt;ECF 3.13.8 changes have distributed to &lt;a href=&quot;https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.eclipse.ecf%22&quot; target=&quot;_blank&quot;&gt;maven central&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;There is a new release (1.3.0) of the &lt;a href=&quot;https://github.com/ECF/etcd-provider/releases&quot; target=&quot;_blank&quot;&gt;etcd discovery provider&lt;/a&gt;.    This provider uses an &lt;a href=&quot;https://coreos.com/etcd/&quot; target=&quot;_blank&quot;&gt;ectd cluster&lt;/a&gt; to publish and discover remote services allow complete integration with systems like &lt;a href=&quot;https://kubernetes.io/&quot; target=&quot;_blank&quot;&gt;Kubernetes&lt;/a&gt;, which also use etcd for service discovery.&lt;br /&gt;&lt;br /&gt;</description>
	<pubDate>Tue, 05 Dec 2017 03:44:13 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>
<item>
	<title>Chris Aniszczyk: Cloud Native Computing Foundation 2 Years Later</title>
	<guid isPermaLink="false">http://aniszczyk.org/?p=4160</guid>
	<link>http://aniszczyk.org/2017/12/04/cloud-native-computing-foundation-2-years-later/</link>
	<description>&lt;p&gt;A little over two years ago after five years of service at Twitter, I took the opportunity to build an open source foundation from scratch using some of the computing techniques we experimented with at Twitter:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;1/ two years from today in NYC, we officially held the first &lt;a href=&quot;https://twitter.com/CloudNativeFdn?ref_src=twsrc%5Etfw&quot;&gt;@CloudNativeFdn&lt;/a&gt; board meeting getting the foundation off the ground, we started with 22 members and 1 project… now we are 14 projects and 150+ members! &lt;img alt=&quot;📈&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.3/72x72/1f4c8.png&quot; style=&quot;height: 1em;&quot; /&gt; &lt;a href=&quot;https://t.co/8MWbIweiTT&quot;&gt;pic.twitter.com/8MWbIweiTT&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Chris Aniszczyk (@cra) &lt;a href=&quot;https://twitter.com/cra/status/937460286210048000?ref_src=twsrc%5Etfw&quot;&gt;December 3, 2017&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;I was initially excited about the idea because of my experience with open source foundations in previous lives, from being involved with the Eclipse Foundation, Linux Foundation, Apache Foundation plus part of the early discussions around OpenStack governance formation. &lt;strong&gt;I viewed this as an opportunity to learn from the lessons of other foundations and do something new and modern in the GitHub era, along with of course making our own mistakes. You really don’t get many opportunities to start an open source foundation from scratch that will impact the whole industry.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stepping back, the original idea behind the &lt;a href=&quot;https://www.cncf.io/&quot;&gt;Cloud Native Computing Foundation&lt;/a&gt; (CNCF) was to promote a method of computing (we call it cloud native) pioneered by internet scale giants such as Google, Twitter, Facebook and so on and bring it to the rest of the industry. If you looked inside these companies, you can see they were running services at scale, packaged in containers, orchestrated by some central system.&lt;/p&gt;
&lt;p&gt;The first mission was to provide a neutral home for &lt;a href=&quot;https://kubernetes.io&quot;&gt;Kubernetes&lt;/a&gt; as the seed project of the foundation but also provide room for adjacent projects that specialized in specific areas for this new world (think monitoring and tracing as an example). The second mission was to convince all the major cloud providers to build in Kubernetes as a managed offering so we could essentially have a “POSIX of the cloud” that would give us a set of distributed APIs that would work everywhere (including on premise). Last week with AWS announcing their managed offering EKS, we have accomplished this goal with &lt;a href=&quot;http://aniszczyk.org/2017/09/19/top-6-public-cloud-providers-in-cncf/&quot;&gt;every major cloud provider supporting Kubernetes natively, kubernetes is truly the lingua franca of the cloud.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We still have a long way to go within CNCF to truly making cloud native computing ubiquitous across the industry, but I’m excited to see so many companies and individuals come together under CNCF to make this happen, especially as we have our largest annual gathering this week, &lt;a href=&quot;https://kubecon.io&quot;&gt;KubeCon/CloudNativeCon&lt;/a&gt;. Personally, I’m nothing but thrilled to what the future holds and truly lucky to be serving our community under the auspices of the foundation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A special thank you to Craig McLuckie, Sarah Novotony, Todd Moore, Ken Owens, Peixin Hou, &lt;span style=&quot;font-weight: 400;&quot;&gt;Doug Davis, &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Jeffrey Borek, &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Jonathan Donaldson, &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Carl Trieloff, Chris Wright and many other folks that were at that CNCF first board meeting two years ago bootstrapping the foundation.&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 04 Dec 2017 22:06:34 +0000</pubDate>
</item>

</channel>
</rss>
